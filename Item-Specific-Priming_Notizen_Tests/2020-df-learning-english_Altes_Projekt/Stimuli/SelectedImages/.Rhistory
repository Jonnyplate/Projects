## Set Working Directory
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
##Installing Packages (only not installed ones)
wants <- c("filesstrings",
"tidyverse")
has <- wants %in% rownames(installed.packages())
if(any(!has))install.packages(wants[!has])
##Loading all packages
lapply(wants, library, character.only = TRUE)
##read data
d.in_1 <- read.delim(
"../SRTask_pc_DataComplete_COMBINED.txt")
d.in_2 <- read.delim(
"../SRTask1_3_DataComplete_COMBINED.txt")
d.in_1$Picture <- as.character.factor(d.in_1$Picture)
d.in_1 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented",
ProportionLearning == 0) -> d1
## Set Working Directory
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
##Installing Packages (only not installed ones)
wants <- c("filesstrings",
"tidyverse")
has <- wants %in% rownames(installed.packages())
if(any(!has))install.packages(wants[!has])
##Loading all packages
lapply(wants, library, character.only = TRUE)
##read data
d.in_1 <- read.delim(
"../SRTask_pc_DataComplete_COMBINED.txt")
##read data
d.in_1 <- read.delim(
"../SRTask_pc_DataComplete_COMBINED.txt")
d.in_2 <- read.delim(
"../SRTask1_3_DataComplete_COMBINED.txt")
d.in_1$Picture <- as.character.factor(d.in_1$Picture)
d.in_1 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented",
ProportionLearning == 0) -> d1
d.in_1 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented",
ProportionLearning == 1) -> d1.2
add_prop <- function() {
result = list()
subjects <- unique(d1$Subject)
# iterate through participants and check if a trial with that
# picture is already in
for (i in subjects) {
print(i)
vp_prop <- d1.2[d1.2$Subject == i,]
vp_end <- d1[d1$Subject == i,]
for (row in 1:nrow(vp_prop)) {
pict = vp_prop[row, "Picture"]
# add a new row for every new picture
if (! pict %in% vp_end[["Picture"]]) {
new_row = vp_prop[row,]
vp_end = rbind(vp_end, new_row)
}
}
result[[i]] <- vp_end
print(length(result[[i]]) == length(unique(result[[i]])))
}
d <- bind_rows(result)
return(d)
}
d1 <- add_prop()
d1 %>%
group_by(Picture) %>%
summarize(mean_error1 = mean(Error),
n1 = n()) -> d1_agg
unique(d.in_1 %>%
select(Picture, StimulusType)) -> cats1
d.in_2 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented") %>%
summarize(mean_error2 = mean(Error),
n2 = n()) -> d2_agg
unique(d.in_2 %>%
select(Picture, StimulusType)) -> cats
d1_cats <- merge(d1_agg, cats, by = "Picture")
d2_cats <- merge(d2_agg, cats, by = "Picture")
d <- merge(d1_cats, d2_cats, by = c("Picture", "StimulusType"))
# compute the weighted mean error rate
d$mean_weighted <- (d$mean_error1 * d$n1 + d$mean_error2 * d$n2)/(d$n1 + d$n2)
# split the data according to category
d %>%
group_split(StimulusType) -> ranking
LM <- ranking[[1]]
LN <- ranking[[2]]
SM <- ranking[[3]]
SN <- ranking[[4]]
rankings <- list(LM, LN, SM, SN)
names(rankings) <- c("LM", "LN", "SM", "SN")
move_images <- function() {
for (r in 1:length(rankings)) {
d <- rankings[[r]]
d <- d[order(d[["mean_weighted"]]),]
# select first 24 pictures
# for LN, we exclude two images depicting very similar objects
# therefore, 26 images are selected at first and the aforementioned
# pictures are excluded
if (r == 2) {
sel <- d[0:34,]
sel <- sel[sel[["Picture"]] != "LN58.bmp" &
sel[["Picture"]] != "LN1.bmp",]
} else {
sel <- d[0:32,]
}
folder <- d$StimulusType[1]
folder_path <- paste("../SelectedImages/", folder, sep = "")
# create a new directory for the images
if (! dir.exists(folder_path)) {
dir.create(folder_path)
}
txt_path = paste("../SelectedImages/", folder, "/",
d$StimulusType[1], ".txt", sep = "")
print(txt_path)
write.table(sel$Picture, txt_path)
# move images to the new folders
new_path = paste("../SelectedImages/", folder, sep = "")
picture_path = "../Images/"
for (image in sel[["Picture"]]) {
current_path = paste(picture_path, image, sep = "")
file.copy(from = current_path, to = new_path)
}
}
}
View(LM)
View(rankings)
View(d.in_1)
View(d)
View(d2_agg)
View(d.in_2)
##read data
d.in_1 <- read.delim(
"../SRTask_pc_DataComplete_COMBINED.txt")
d.in_2 <- read.delim(
"../SRTask1_3_DataComplete_COMBINED.txt")
## ___________________________________________________________________________##
#  Dataset 1--------------------------------------------------------------------
d.in_1$Picture <- as.character.factor(d.in_1$Picture)
d.in_1 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented",
ProportionLearning == 0) -> d1
d.in_1 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented",
ProportionLearning == 1) -> d1.2
add_prop <- function() {
result = list()
subjects <- unique(d1$Subject)
# iterate through participants and check if a trial with that
# picture is already in
for (i in subjects) {
print(i)
vp_prop <- d1.2[d1.2$Subject == i,]
vp_end <- d1[d1$Subject == i,]
for (row in 1:nrow(vp_prop)) {
pict = vp_prop[row, "Picture"]
# add a new row for every new picture
if (! pict %in% vp_end[["Picture"]]) {
new_row = vp_prop[row,]
vp_end = rbind(vp_end, new_row)
}
}
result[[i]] <- vp_end
print(length(result[[i]]) == length(unique(result[[i]])))
}
d <- bind_rows(result)
return(d)
}
d1 <- add_prop()
d1 %>%
group_by(Picture) %>%
summarize(mean_error1 = mean(Error),
PictureNR = PictureNR,
n1 = n()) -> d1_agg
unique(d.in_1 %>%
select(Picture, StimulusType)) -> cats1
## ___________________________________________________________________________##
#  Dataset 2--------------------------------------------------------------------
d.in_2 %>%
group_by(Picture) %>%
filter(PrimeProbeVer == "Prime",
ExperimentCondition == "implemented") %>%
summarize(mean_error2 = mean(Error),
PictureNR = PictureNR,
n2 = n()) -> d2_agg
unique(d.in_2 %>%
select(Picture, StimulusType)) -> cats
## ___________________________________________________________________________##
#  Merge -----------------------------------------------------------------------
d1_cats <- merge(d1_agg, cats, by = "Picture")
d2_cats <- merge(d2_agg, cats, by = "Picture")
d <- merge(d1_cats, d2_cats, by = c("Picture", "StimulusType"))
View(d)
unique(d.in_1 %>%
select(Picture, StimulusType, PictureNR)) -> cats1
unique(d.in_2 %>%
select(Picture, StimulusType, PictureNR)) -> cats
d1_cats <- merge(d1_agg, cats, by = "Picture")
d2_cats <- merge(d2_agg, cats, by = "Picture")
d <- merge(d1_cats, d2_cats, by = c("Picture", "StimulusType"))
View(d)
any(d1_cats$PictureNR != d2_cats$PictureNR)
d <- merge(d1_cats, d2_cats, by = c("Picture", "StimulusType", "PictureNR"))
View(d)
# compute the weighted mean error rate
d$mean_weighted <- (d$mean_error1 * d$n1 + d$mean_error2 * d$n2)/(d$n1 + d$n2)
# split the data according to category
d %>%
group_split(StimulusType) -> ranking
LM <- ranking[[1]]
LN <- ranking[[2]]
SM <- ranking[[3]]
SN <- ranking[[4]]
rankings <- list(LM, LN, SM, SN)
names(rankings) <- c("LM", "LN", "SM", "SN")
View(rankings)
?write.table
move_images <- function() {
for (r in 1:length(rankings)) {
d <- rankings[[r]]
d <- d[order(d[["mean_weighted"]]),]
# select first 32 pictures
# for LN, we exclude two images depicting very similar objects
# therefore, 34 images are selected at first and the aforementioned
# pictures are excluded
if (r == 2) {
sel <- d[0:34,]
sel <- sel[sel[["Picture"]] != "LN58.bmp" &
sel[["Picture"]] != "LN1.bmp",]
} else {
sel <- d[0:32,]
}
folder <- d$StimulusType[1]
folder_path <- paste("../SelectedImages/", folder, sep = "")
# create a new directory for the images
if (! dir.exists(folder_path)) {
dir.create(folder_path)
}
txt_path = paste("../SelectedImages/", folder, "/",
d$StimulusType[1], ".txt", sep = "")
print(txt_path)
write.table(sel[,c("Picture", "PictureNR", "StimulusType")], txt_path)
# move images to the new folders
new_path = paste("../SelectedImages/", folder, sep = "")
picture_path = "../Images/"
for (image in sel[["Picture"]]) {
current_path = paste(picture_path, image, sep = "")
file.copy(from = current_path, to = new_path)
}
}
}
move_images()
move_images <- function() {
for (r in 1:length(rankings)) {
d <- rankings[[r]]
d <- d[order(d[["mean_weighted"]]),]
# select first 32 pictures
# for LN, we exclude two images depicting very similar objects
# therefore, 34 images are selected at first and the aforementioned
# pictures are excluded
if (r == 2) {
sel <- d[0:34,]
sel <- sel[sel[["Picture"]] != "LN58.bmp" &
sel[["Picture"]] != "LN1.bmp",]
} else {
sel <- d[0:32,]
}
folder <- d$StimulusType[1]
folder_path <- paste("../SelectedImages/", folder, sep = "")
# create a new directory for the images
if (! dir.exists(folder_path)) {
dir.create(folder_path)
}
txt_path = paste("../SelectedImages/", folder, "/",
d$StimulusType[1], ".txt", sep = "")
print(txt_path)
write.table(sel[,c("Picture", "PictureNR", "StimulusType")], txt_path)
write.csv2(sel[,c("Picture", "PictureNR", "StimulusType")], txt_path)
# move images to the new folders
new_path = paste("../SelectedImages/", folder, sep = "")
picture_path = "../Images/"
for (image in sel[["Picture"]]) {
current_path = paste(picture_path, image, sep = "")
file.copy(from = current_path, to = new_path)
}
}
}
move_images()
write.csv2(sel[,c("Picture", "PictureNR", "StimulusType")], csv_path)
move_images <- function() {
for (r in 1:length(rankings)) {
d <- rankings[[r]]
d <- d[order(d[["mean_weighted"]]),]
# select first 32 pictures
# for LN, we exclude two images depicting very similar objects
# therefore, 34 images are selected at first and the aforementioned
# pictures are excluded
if (r == 2) {
sel <- d[0:34,]
sel <- sel[sel[["Picture"]] != "LN58.bmp" &
sel[["Picture"]] != "LN1.bmp",]
} else {
sel <- d[0:32,]
}
folder <- d$StimulusType[1]
folder_path <- paste("../SelectedImages/", folder, sep = "")
# create a new directory for the images
if (! dir.exists(folder_path)) {
dir.create(folder_path)
}
txt_path = paste("../SelectedImages/", folder, "/",
d$StimulusType[1], ".txt", sep = "")
csv_path = paste("../SelectedImages/", folder, "/",
d$StimulusType[1], ".csv", sep = "")
print(txt_path)
write.table(sel[,c("Picture", "PictureNR", "StimulusType")], txt_path)
write.csv2(sel[,c("Picture", "PictureNR", "StimulusType")], csv_path)
# move images to the new folders
new_path = paste("../SelectedImages/", folder, sep = "")
picture_path = "../Images/"
for (image in sel[["Picture"]]) {
current_path = paste(picture_path, image, sep = "")
file.copy(from = current_path, to = new_path)
}
}
}
move_images()
View(d)
View(d.in_1)
